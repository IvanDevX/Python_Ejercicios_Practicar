Claro, aquí tienes información más detallada sobre las operaciones y métodos que puedes realizar con diccionarios en Python, incluyendo items() y get():
1.	Acceder a un valor por clave:
    •	Utiliza la notación de corchetes diccionario[clave] para acceder al valor asociado con una clave específica. Si la clave no existe, esto generará una excepción KeyError. Para evitar esto, puedes usar get() para acceder a un valor con un valor predeterminado si la clave no existe.
2.	Agregar o modificar elementos:
    •	Utiliza la notación de corchetes diccionario[clave] = valor para agregar nuevos elementos al diccionario o modificar valores existentes. Si la clave ya existe, el valor se sobrescribirá.
3.	Eliminar elementos:
    •	Usa del diccionario[clave] para eliminar elementos de un diccionario. Si la clave no existe, esto generará una excepción KeyError. Puedes usar pop() si deseas eliminar y obtener el valor asociado a una clave específica.
4.	Verificar la existencia de una clave:
    •	Utiliza el operador in para verificar si una clave existe en un diccionario. Por ejemplo, if clave in diccionario:. También puedes usar not in para verificar si una clave no existe.
5.	Obtener una lista de todas las claves:
    •	diccionario.keys() devuelve una vista de todas las claves en el diccionario. Puedes convertirla en una lista utilizando list(diccionario.keys()) si es necesario.
6.	Obtener una lista de todos los valores:
    •	diccionario.values() devuelve una vista de todos los valores en el diccionario. Al igual que con las claves, puedes convertirla en una lista con list(diccionario.values()).
7.	Obtener el número de elementos:
    •	len(diccionario) devuelve la cantidad de elementos (pares clave-valor) en el diccionario.
8.	Copiar un diccionario:
    •	Puedes crear una copia superficial de un diccionario utilizando diccionario_copia = diccionario.copy(). Esto crea una nueva instancia de diccionario con los mismos pares clave-valor.
9.	Iterar sobre un diccionario:
    •	Puedes usar un bucle for para iterar sobre las claves o los pares clave-valor en un diccionario.
10.	Vaciar un diccionario:
    •	diccionario.clear() elimina todos los elementos del diccionario, dejándolo vacío.
11.	Combinar diccionarios:
    •	Puedes combinar dos diccionarios en uno solo utilizando el método update() o mediante un diccionario por comprensión.
12.	Obtener un valor predeterminado si la clave no existe:
    •	diccionario.get(clave, valor_predeterminado) te permite obtener el valor de una clave si existe en el diccionario, o un valor predeterminado si no existe. Esto es útil para evitar excepciones KeyError.
13.	Usar diccionarios como argumentos de funciones:
    •	Puedes pasar diccionarios como argumentos de funciones para enviar múltiples valores relacionados como un solo argumento. Esto es especialmente útil en funciones que requieren una variedad de opciones o configuraciones.
14.	Convertir listas o tuplas en diccionarios:
    •	Puedes crear un diccionario a partir de una lista de tuplas utilizando dict(lista_de_tuplas). Cada tupla debe contener dos elementos: una clave y un valor.
Los diccionarios son una de las estructuras de datos más utilizadas en Python debido a su flexibilidad y versatilidad. Pueden utilizarse para una amplia variedad de tareas, desde el almacenamiento de datos estructurados hasta la gestión de configuraciones y la organización de información en general.
